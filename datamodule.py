from torchvision import transformsfrom torchvision.datasets import ImageFolderfrom torch.utils.data import Dataset, DataLoader, random_splitimport numpy as npimport pytorch_lightning as plclass TripletsDataset(Dataset):    def __init__(self):        directory = '../../datasets/k_fashion_detections/train/'        self.dataset = ImageFolder(directory)        self.transform = transforms.Compose([            transforms.Resize(256),            transforms.RandomCrop(224),            transforms.ToTensor(),            transforms.RandomHorizontalFlip(),            transforms.Normalize(mean=[.485, .456, .406],                                 std=[.229, .224, .225])        ])        self.labels = np.array(self.dataset.targets)        self.images = self.dataset        self.labels_set = set(self.dataset.class_to_idx.values())        self.label_to_indices = {label: np.where(self.labels == label)[0] for label in self.labels_set}    def __getitem__(self, index):        anc_img, anc_label = self.images[index][0], self.labels[index].item()        positive_index = index        while positive_index == index:            positive_index = np.random.choice(self.label_to_indices[anc_label])        negative_label = np.random.choice(list(self.labels_set - set([anc_label])))        negative_index = np.random.choice(self.label_to_indices[negative_label])        pos_img = self.images[positive_index][0]        pos_label = self.labels[positive_index]        neg_img = self.images[negative_index][0]        neg_label = self.labels[negative_index]        if self.transform is not None:            anc_img = self.transform(anc_img)            pos_img = self.transform(pos_img)            neg_img = self.transform(neg_img)        return (anc_img, pos_img, neg_img), (anc_label, pos_label, neg_label)    def __len__(self):        return len(self.dataset)class TripletDataModule(pl.LightningDataModule):    def __init__(self,                 batch_size=64,                 num_workers=4):        super(TripletDataModule, self).__init__()        self.batch_size = batch_size        self.num_workers = num_workers        dataset = TripletsDataset()        all_len = len(dataset)        train_len = int(all_len * .75)        val_len = all_len - train_len        self.train_dataset, self.val_dataset = random_split(dataset=dataset,                                                            lengths=[train_len, val_len])    def train_dataloader(self):        return DataLoader(dataset=self.train_dataset,                          batch_size=self.batch_size,                          num_workers=self.num_workers,                          shuffle=True,                          pin_memory=True,                          persistent_workers=True,                          drop_last=True)    def val_dataloader(self):        return DataLoader(dataset=self.val_dataset,                          batch_size=self.batch_size,                          num_workers=self.num_workers,                          shuffle=False,                          pin_memory=True,                          persistent_workers=True,                          drop_last=True)